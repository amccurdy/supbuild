#!/usr/bin/env python
import argparse as ap
import ConfigParser
import sys
import getpass
import time
import re

from time import gmtime, strftime
from operator import itemgetter
from ansible import runner

parser = ap.ArgumentParser(description='Tool to create and tear-down '
                        'virtual machines for support engineers. Use the '
                        '\'examples\' option for usage examples')
parser.add_argument('action', help='Pick one of the following actions: '
                    'examples, build, list, list-all, delete, power-on, '
                    'power-off, mem, storage, elect, util, log')
parser.add_argument('-v', '--vmtype', type=str, help='Used in conjunction '
                    'with "build". Pick one: rm424, rm425, cent6, cent7, '
                    'ubuntu16')
parser.add_argument('-u', '--uuid', type=str, help='UUID of the VM to be  '
                    'actioned; get this from running a \'list\'')
parser.add_argument('-l', '--label', type=str, help='Label for a VM name. '
                    'Allows you to slightly customize the name of your '
                    ' VMs. Limited to 12 characters.')
parser.add_argument('-H', '--host', type=str, help='Used solely in '
                    'conjunction with \'list\' and \'list-all\'. Name of '
                    'the host from which to gather the list of virtual '
                    'machines')
args = parser.parse_args()

supbuild_owner = 'Adam McCurdy, amccurdy@zenoss.com'
logfile_path = '/opt/supbuild/log/supbuild.log'
configfile_path = '/opt/supbuild/etc/supbuild.conf'
remote_user = 'root'
vmtypes = ['rm424', 'rm425', 'cent6', 'cent7', 'ubuntu16']
ip_timeout = 120


def get_hosts():
    config = ConfigParser.RawConfigParser()
    config.read(configfile_path)
    return config.sections()


hosts = get_hosts()


def get_vm_source(host, vmtype):
    config = ConfigParser.RawConfigParser()
    config.read(configfile_path)
    try:
        result = config.get(host, vmtype)
        return result
    except:
        fail_config(vmtype)


def get_tool_name():
    '''
    Making it easier to change the name of the tool if I decide that's ever
    something smart to do.
    '''
    try:
        tool_name = sys.argv[0].split('/')[-1]
    except KeyError:
        tool_name = 'supbuild'
    return tool_name


def get_user():
    '''
    Return currently logged-in user
    '''
    return getpass.getuser()


def run_task(cmd, run_hosts=''):
    '''
    Creates an ansible runner task and returns the result of calling run()
    on that task object.
    '''
    task = runner.Runner(
        module_name='shell',
        module_args=cmd,
        remote_user=remote_user
    )
    results = task.run()
    return results


def get_memory_utilization():
    '''
    Return dict with keys of hosts and values of memory utilization in percent
    '''
    cmd = 'xentop -b -i1 | awk \'{print $6}\''
    results = run_task(cmd, run_hosts=hosts)
    contacted = results['contacted']
    mem_util = {}
    for host, output in contacted.iteritems():
        stdout = output['stdout']
        util_nums = stdout.replace('MEM(%)', '').split('\n')
        tot = 0
        for num in util_nums:
            if len(num) > 0:
                tot += float(num)
        mem_util[host] = tot
    return mem_util

def get_storage_utilization():
    '''
    Return dict with keys of hosts and values of storage utilization in percent
    '''
    v_alloc = 'xe sr-list name-label=Local\ storage ' \
        'params=virtual-allocation|grep -v ^$'
    p_size = 'xe sr-list name-label=Local\ storage ' \
        'params=physical-size|grep -v ^$'
    p_util = 'xe sr-list name-label=Local\ storage ' \
        'params=physical-utilisation|grep -v ^$'
    cmds = [v_alloc, p_size, p_util]
    storage_util = {}
    for h in hosts:
        storage_util[h] = {}
    for cmd in cmds:
        results = run_task(cmd, run_hosts=hosts)
        contacted = results['contacted']
        for host, output in contacted.iteritems():
            try:
                if 'virtual-allocation' in output['stdout']:
                    valloc = int(output['stdout'].split()[4])
                    storage_util[host]['valloc'] = valloc
                elif 'physical-size' in output['stdout']:
                    psize = int(output['stdout'].split()[4])
                    storage_util[host]['psize'] = psize
                else:
                    putil = int(output['stdout'].split()[4])
                    storage_util[host]['putil'] = putil
            except:
                fail_storage() #need to write
    for host in storage_util.keys():
        l_putil = float(storage_util[host]['putil'])
        l_psize = float(storage_util[host]['psize'])
        storage_util[host]['usage'] = "{0:.1f}".format(l_putil / l_psize * 100)
    return storage_util

def list_vms(host):
    '''
    Returns a run-result of VMs containing the name of the currently logged-in
    user. Optionally uses the -H or --host filter to return results from only
    one host.
    '''
    if host == 'all':
        host = hosts
    else:
        host = [host]
    user = get_user()
    cmd = 'xe vm-list params=name-label,uuid,power-state,networks | '\
        'grep -B1 -A2 %s' % (user)
    results = run_task(cmd, run_hosts=[host])
    return results


def list_vms_all(host):
    '''
    Returns a run-result of all VMs on either all hosts, or a host that was
    specified via the -H or --host filter.
    '''
    if host == 'all':
        host = hosts
    else:
        host = [host]
    cmd = 'xe vm-list params=name-label,uuid,power-state,networks,'\
        'VCPUs-number,memory-actual | grep -B1 -A4 "name-label"'
    results = run_task(cmd, run_hosts=[host])
    return results


def get_util():
    '''
    Prints out a list of users and their memory utilization in GB
    '''
    results = list_vms_all('all')
    contacted = results['contacted']
    sorted_hosts = contacted.keys()
    sorted_hosts.sort()
    user_utilization = {}
    for host in sorted_hosts:
        stdout = contacted[host]['stdout']
        if len(stdout) == 0:
            pass
        per_vm = stdout.split('uuid')
        for item in per_vm:
            vm_name = None
            memory_actual = None
            power_state = None
            vm_owner = None
            if len(item) > 3:
                per_line = item.split('\n')
                for line in per_line:
                    line = line.replace(' ', '')
                    if 'name-label' in line:
                        vm_name = line.split(':')[1]
                    if 'memory-actual' in line:
                        memory_actual = int(line.split(':')[1])
                    if 'power-state' in line:
                        power_state = line.split(':')[1]
                    if vm_name:
                        if '.zenoss.loc' not in vm_name and '-' in vm_name:
                            if 'buildTemplate' not in vm_name:
                                vm_owner = vm_name.split('-')[0]
            if vm_owner and memory_actual and power_state == 'running':
                if vm_owner not in user_utilization.keys():
                    user_utilization[vm_owner] = memory_actual
                else:
                    user_utilization[vm_owner] += memory_actual
    return user_utilization


def elect_target_host():
    '''
    Returns the name of the VM host with the most free memory
    '''
    util = get_memory_utilization()
    # temporarily remove supxen3 from the mix
    # del(util['supxen3.zenoss.loc'])
    election = sorted(util.items(), key=itemgetter(1))
    winner = election[0][0]
    return winner


def build_vm(host, vmtype, vmname):
    '''
    Returns a run-result of VM creation
    '''
    try:
        source_uuid = get_vm_source(host, vmtype)
    except KeyError as e:
        print 'Unsupported host or vmtype: %s, %s' % (host, vmtype)
        raise(e)
    cmd = 'xe vm-copy vm=%s new-name-label=%s' % (source_uuid, vmname)
    results = run_task(cmd, run_hosts=[host])
    return results


def fetch_vm_uid(host, vmname):
    '''
    Returns the UUID of a VM when fed a host and vmname
    '''
    cmd = 'xe vm-list name-label=\'%s\' params=uuid | '\
        'sed  \'s/uuid ( RO)    : //\'' % (vmname)
    results = run_task(cmd, run_hosts=[host])
    uuid_dirty = results['contacted'][host]['stdout']
    uuid_clean = uuid_dirty.replace('\n', '')
    if not len(uuid_clean) > 0:
        uuid_clean = None
    return uuid_clean


def fetch_vm_name(uuid):
    '''
    Returns the VM name-label if given a uuid
    '''
    cmd = 'xe vm-list uuid=\'%s\' params=name-label | '\
        'sed  \'s/name-label ( RW)    : //\'' % (uuid)
    results = run_task(cmd, run_hosts='')
    for k, v in results['contacted'].iteritems():
        name_dirty = v['stdout']
        name_clean = name_dirty.replace('\n', '')
        if len(name_clean) > 0:
            return name_clean
    return 'Unknown'


def poweron(uuid):
    '''
    Tries to poweron a machine on all hosts. Returns the host where the poweron
    succeeded.
    '''
    cmd = 'xe vm-start vm=%s' % (uuid)
    results = run_task(cmd, run_hosts='')
    messages = results['contacted']
    for k, v in messages.iteritems():
        if len(v['stderr']) == 0:
            return k


def poweroff(uuid):
    '''
    Tries to poweroff a machine on all hosts. Returns the host where the
    poweroff succeded.
    '''
    cmd = 'xe vm-shutdown --force vm=%s' % (uuid)
    results = run_task(cmd, run_hosts='')
    messages = results['contacted']
    for k, v in messages.iteritems():
        if len(v['stderr']) == 0:
            return k


def delete_vm(uuid):
    '''
    Tries to delete a machine on all hosts. Returns the host where the delete
    succeeded.
    '''
    cmd = 'xe vm-uninstall --force vm=%s' % (uuid)
    results = run_task(cmd)
    messages = results['contacted']
    for k, v in messages.iteritems():
        if 'destroyed' in v['stdout'].lower():
            return k


def get_ip(host, uuid):
    '''
    Returns the IP address (string) of a machine when given a host and UUID
    '''
    cmd = 'xe vm-list uuid=\'%s\' params=networks | awk \'{print $5}\' | '\
        'sed s/\;// | head -n 1' % (uuid)
    results = run_task(cmd, run_hosts=[host])
    ip_dirty = results['contacted'][host]['stdout']
    ip_clean = ip_dirty.replace('\n', '')
    return ip_clean


def get_uuid():
    '''
    Grab the UUID from args or puke if we don't get one
    '''
    if not args.uuid:
        print 'No UUID specified. Specify a UUID or run -h for help.'
        sys.exit(1)
    else:
        return args.uuid


def examples():
    '''
    Print a list of examples on how to use this tool.
    '''
    toolname = get_tool_name()
    print 'Basic options: '
    print 'List your VMs:\n $ %s list' % (toolname)
    print 'List all VMs:\n $ %s list-all' % (toolname)
    print 'Create a 4.2.5 vm:\n $ %s build -v rm425' % (toolname)
    print 'Power-off a machine:\n $ %s power-off -u <UUID>' % (toolname)
    print 'Power-on a machine:\n $ %s power-on -u <UUID>' % (toolname)
    print 'Delete a machine:\n $ %s delete -u <UUID>' % (toolname)
    print '\n Advanced and/or Troubleshooting Options:'
    print 'Display breakdown of who is using how much memory:\n $ %s ' \
        'util' % (toolname)
    print 'Display memory utilization on hosts:\n $ %s util' % (toolname)
    print 'Perform a build election:\n $ %s elect' % (toolname)
    print 'Display your VMs on supxen1.zenoss.loc\n $ %s list -H '\
        'supxen1.zenoss.loc' % (toolname)
    print 'Build a cent6 VM on supxen1.zenoss.loc\n $ %s build -v cent6 -H '\
        'supxen1.zenoss.loc' % (toolname)
    print 'Build a cent6 VM on supxen1.zenoss.loc'
    sys.exit(0)


def log_action(username, action, vmname, host, success):
    '''
    Simple logging mechanism. Writes out to the variable "logfile_path"
    '''
    time = strftime('%d %b %Y %H:%M:%S', gmtime())
    line = '%s - %s: %s %s on %s. Success: %s\n' % (time, username, action,
        vmname, host, success)
    with open(logfile_path, 'a') as logfile:
        logfile.write(line)


def display_log():
    '''
    Display the log file
    '''
    logfile = open(logfile_path, 'r')
    for line in logfile.readlines()[-100:]:
        print line.replace('\n', '')
    sys.exit(0)

def fail_storage():
    '''
    Exit used when failing to pull storage utilization statistics.
    '''
    print 'Failed to retrieve storage utilization statistics.'
    sys.exit(1)

def fail_config(vmtype):
    '''
    Exit used when failing to get a source VM uid
    '''
    print 'Failed to find source uid for %s Make sure you have a valid  '\
        'vmtype specified.' % (vmtype)
    sys.exit(1)


def fail_start():
    '''
    Exit used when failing to start a VM
    '''
    print 'VM failed to start. Try running \"%s mem\" to check overall '\
        'host memory utilization.' % (get_tool_name())
    sys.exit(1)


def fail_uuid():
    '''
    Exit used if there's a problem with the UUID
    '''
    print 'Something went wrong. Do you have the right uuid?'
    sys.exit(1)


def fail_label():
    '''
    Exit used if there's a problem with the name-label
    '''
    print 'Error! Label must be between 1 and 12 characters long and '\
        'contain only alphanumeric characters.'
    sys.exit(1)


def fail_host():
    '''
    Exit used if there's a problem with the host specified
    '''
    print 'Error! Invalid host specified. Please use one of the '\
        'following hosts: %s' % (str(hosts).replace('[', '').replace(']', ''))
    sys.exit(1)


def fail_ip():
    '''
    Exit used if we don't get an IP address in a reasonable amount of time'
    '''
    print '\nError! Couldn\'t get an IP address after %s seconds. '\
        'Try waiting for a minute or two and running a \"%s list\"'\
        % (ip_timeout, get_tool_name())
    sys.exit(1)


class __main__():
    user = get_user()
    if args.action == 'mem':
        mem_util = get_memory_utilization()
        # The way this is done is admittedly silly, but it puts the results
        # in order based on the host
        sorted_hosts = mem_util.keys()
        sorted_hosts.sort()
        print 'Host: % memory utilization'
        for key in sorted_hosts:
            print '%s: %s' % (key, mem_util[key])
    elif args.action == 'storage':
        storage_util = get_storage_utilization()
        sorted_hosts = storage_util.keys()
        sorted_hosts.sort()
        print 'Host: % storage utilization'
        for host in sorted_hosts:
            print "%s : %s" % (host, storage_util[host]['usage'])
    elif args.action == 'elect':
        winner = elect_target_host()
        print 'Winner: %s' % winner
    elif args.action == 'build':
        if not args.vmtype:
            print 'No vmtype specified. Specify a vmtype or use -h for help.'
            sys.exit(1)
        elif args.vmtype not in vmtypes:
            print 'Unrecognized vmtype: %s. Specify a valid vmtype or use '\
                '-h for help.' % (args.vmtype)
            sys.exit(1)
        else:
            if args.label:
                if len(args.label) > 12:
                    fail_label()
                else:
                    label = args.label
            else:
                label = get_tool_name()
            if not re.match('^[A-Za-z0-9]*$', label):
                fail_label()
            # getting data to build the hostname
            vmtype = args.vmtype
            ts = time.strftime('%m/%d_%H:%M')
            # this hostname will look something like this:
            # amccurdy-rm425-<LABEL>-11/20_12:34
            vmname = '%s-%s-%s-%s' % (user, vmtype, label, ts)
            if args.host:
                if args.host in hosts:
                    host = args.host
                else:
                    fail_host()
            else:
                host = elect_target_host()
            print 'Using %s to create %s' % (host, vmname)
            build_vm(host, vmtype, vmname)
            vm_uuid = fetch_vm_uid(host, vmname)
            if not vm_uuid:
                print 'VM not created. This shouldn\'t happen. Contact '\
                    '%s for help.' % (supbuild_owner)
                log_action(user, args.action, vmname, host, False)
                sys.exit(1)
            log_action(user, args.action, vmname, host, True)
            start_it = poweron(vm_uuid)
            if start_it:
                print 'Successfully started %s on %s' % (vmname, start_it)
            else:
                fail_start()
            # Here we're using sys.stdout to essentially print on the same
            # line. We try to get an IP, if we don't get one, we sleep for
            # 5 seconds and try again. The reason that it checks for the 10
            # at the start of the ipaddr string is that sometimes the get
            # ip method will return the string "in" when the target VM
            # doesn't have a valid IP address.
            sys.stdout.write('Waiting on IP address')
            ip_timer = 0
            new_ip = False
            while not new_ip:
                sys.stdout.write('.')
                sys.stdout.flush()
                ipaddr = get_ip(host, vm_uuid)
                new_ip = ipaddr if ipaddr.startswith('10') else False
                if not new_ip:
                    time.sleep(5)
                ip_timer += 5
                if ip_timer >= ip_timeout:
                    break
            if new_ip:
                print '\nIP address: %s' % (new_ip)
            else:
                fail_ip()
    # checking for list actions, looking for host filter, and grabbing/parsing
    # lists of VMs
    elif args.action in ['list', 'list-all']:
        if args.host and args.host in hosts:
            host = args.host
        elif args.host and args.host not in hosts:
            fail_host()
        elif not args.host:
            host = 'all'
        if args.action == 'list':
            results = list_vms(host)
        elif args.action == 'list-all':
            results = list_vms_all(host)
        # format the results and print them out, again - silly way of doing it,
        # but at least this way it sorts by host
        contacted = results['contacted']
        sorted_hosts = contacted.keys()
        sorted_hosts.sort()
        for host in sorted_hosts:
            stdout = contacted[host]['stdout']
            if len(stdout) == 0:
                stdout = ' - None'
            print 'Host: %s' % (host)
            for line in stdout.split('\n'):
                if line.startswith('--'):
                    print ''
                else:
                    print line
            print ''
    elif args.action == 'util':
        user_utilization = get_util()
        users = user_utilization.keys()
        users.sort()
        print 'User           :  Memory Utilization (GB)'
        for user in users:
            utilization = user_utilization[user]/1024/1024/1024
            print '%-15s:  %-15s' % (user, utilization)
    elif args.action == 'delete':
        uuid = get_uuid()
        vm_name = fetch_vm_name(uuid)
        delete_it = delete_vm(uuid)
        if delete_it:
            host = delete_it
            print 'Deleted %s (%s) from %s' % (vm_name, uuid, host)
            log_action(user, args.action, vm_name, host, True)
        else:
            host = 'Unknown'
            log_action(user, args.action, vm_name, host, False)
            fail_uuid()
    elif args.action == 'power-on':
        uuid = get_uuid()
        vm_name = fetch_vm_name(uuid)
        start_it = poweron(uuid)
        if start_it:
            host = start_it
            print 'Powered on %s (%s) on %s' % (vm_name, uuid, host)
            log_action(user, args.action, vm_name, host, True)
        else:
            host = 'Unknown'
            log_action(user, args.action, vm_name, host, False)
            fail_uuid()
    elif args.action == 'power-off':
        uuid = get_uuid()
        vm_name = fetch_vm_name(uuid)
        stop_it = poweroff(uuid)
        if stop_it:
            host = stop_it
            print 'Powered off %s (%s) on %s' % (vm_name, uuid, host)
            log_action(user, args.action, vm_name, host, True)
        else:
            host = 'Unknown'
            fail_uuid()
            log_action(user, args.action, vm_name, host, False)
    elif args.action in ['examples', 'example']:
        examples()
    elif args.action == 'name':
        uuid = get_uuid()
        vm_name = fetch_vm_name(uuid)
        print vm_name
    elif args.action == 'log':
        display_log()
    else:
        print 'Invalid argument specified: %s -- try running "%s -h"' % \
            (args.action, get_tool_name())
        sys.exit(1)
