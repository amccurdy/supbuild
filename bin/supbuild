#!/usr/bin/env python
import argparse
import sys
import getpass
import time

from operator import itemgetter
from ansible import runner

parser = argparse.ArgumentParser()
parser.add_argument('action', help='build, list, list-all, delete, power-on, '\
    'power-off')
parser.add_argument('-v','--vmtype',type=str, help='Used in conjunction with  '\
    '"build". Pick one: rm424, rm425, cent6, cent7')
parser.add_argument('-u','--uuid',type=str, help='UUID of the VM to be  '\
    'actioned; get this from running a \'list\'')
parser.add_argument('-l','--label',type=str, help='Label for a VM name. Allows '\
    'you to slightly customize the name of your VMs. Limited to 8 characters.')
args = parser.parse_args()

supbuild_owner = 'Adam McCurdy, amccurdy@zenoss.com'
remote_user='root'
#hosts = ['supxen1.zenoss.loc','supxen2.zenoss.loc','supxen3.zenoss.loc']
vmtypes = ['rm424', 'rm425', 'cent6', 'cent7', '508poc']
templatemap = {
    'supxen1.zenoss.loc': {},
    'supxen2.zenoss.loc': {
        'rm424': 'aa9ad0c5-e6c5-9b17-480f-990e64786507',
        'rm425': '242a4a92-15a0-6018-3b7c-e19352da361e',
        'cent6': '6173583a-3950-a00c-00b1-1dbd2dbece55',
        'cent7': '25b456c9-bd55-9268-5db9-548c6f243b7f',
        '508poc': ''
    },
    'supxen3.zenoss.loc': {
        'rm424': '30c5fdf6-60b7-a3dc-d5e0-c61760b1a704',
        'rm425': '9b768e47-0b86-baaa-502f-f94f7fe65d92',
        'cent6': '8336b007-5ff2-10ce-74cd-72e1ad9db4d7',
        'cent7': '384037f4-ff88-b0c5-43e4-23464dc7cbac',
        '508poc': 'bf613042-a261-9811-fff0-7ea12f3b6b00'
    }
}

def get_user():
    '''
    Return currently logged-in user
    '''
    return getpass.getuser()

def get_memory_utilization():
    '''
    Return dict with keys of hosts and values of memory utilization in percent
    '''
    cmd = 'xentop -b -i1 | awk \'{print $6}\''
    task = runner.Runner(
        module_name='shell',
        module_args=cmd,
        remote_user=remote_user
    )
    results = task.run()
    contacted = results['contacted']
    mem_util = {}
    for host, output in contacted.iteritems():
        stdout = output['stdout']
        util_nums = stdout.replace('MEM(%)','').split('\n')
        tot = 0
        for num in util_nums:
            if len(num) > 0:
                tot += float(num)
        mem_util[host] = tot
    return mem_util

def list_vms():
    '''
    Returns a run-result of VMs containing the name of the currently logged-in 
    user.
    '''
    user = get_user()
    cmd = 'xe vm-list params=name-label,uuid,power-state,networks | '\
        'grep -B1 -A2 %s' % (user)
    task = runner.Runner(
        module_name='shell',
        module_args=cmd,
        remote_user=remote_user
    )
    results = task.run()
    return results

def list_vms_all():
    '''
    Returns a run-result of VMs on all hosts
    '''
    cmd = 'xe vm-list params=name-label,uuid,power-state,networks | '\
        'grep -B1 -A2 "name-label"'
    task = runner.Runner(
        module_name='shell',
        module_args=cmd,
        remote_user=remote_user
    )
    results = task.run()
    return results

def elect_target_host():
    '''
    Returns the name of the VM host with the most free memory
    '''
    util = get_memory_utilization()
    # temporarily removing supxen1 from the mix
    if 'supxen1.zenoss.loc' in util.keys():
        del(util['supxen1.zenoss.loc'])
    election = sorted(util.items(), key=itemgetter(1))
    winner = election[0][0]
    return winner

def test_elect_target_host():
    '''
    Returns the name of the VM host with the most free memory
    '''
    util = get_memory_utilization()
    if 'supxen1.zenoss.loc' in util.keys():
        del(util['supxen1.zenoss.loc'])
    election = sorted(util.items(), key=itemgetter(1))
    winner = election[0][0]
    return winner

def build_vm(host, vmtype, vmname):
    '''
    Returns a run-result of VM creation
    '''
    try: 
        source_uuid = templatemap[host][vmtype]
    except KeyError as e:
        print 'Unsupported host or vmtype: %s, %s' % (host, vmtype)
        raise(e)
    cmd = 'xe vm-copy vm=%s new-name-label=%s' % (source_uuid, vmname)
    task = runner.Runner(
        module_name='shell',
        module_args=cmd,
        run_hosts=[host],
        remote_user=remote_user
    )
    results = task.run()
    return results

def fetch_vm_uid(host, vmname):
    '''
    Returns the UUID of a VM when fed a host and vmname
    '''
    cmd = 'xe vm-list name-label=\'%s\' params=uuid | '\
        'sed  \'s/uuid ( RO)    : //\'' % (vmname)
    task = runner.Runner(
        module_name='shell',
        module_args=cmd,
        run_hosts=[host],
        remote_user=remote_user
    )
    results = task.run()
    uuid_dirty = results['contacted'][host]['stdout']
    uuid_clean = uuid_dirty.replace('\n','')
    if not len(uuid_clean) > 0:
       uuid_clean = None
    return uuid_clean

def poweron(uuid):
    '''
    Tries to poweron a machine on all hosts. Returns the host where the poweron 
    succeeded. 
    '''
    cmd = 'xe vm-start vm=%s' % (uuid)
    task = runner.Runner(
        module_name='shell',
        module_args=cmd,
        remote_user=remote_user
    )
    results = task.run()
    messages = results['contacted']
    for k,v in messages.iteritems():
       if len(v['stderr']) == 0:
           return k

def poweroff(uuid):
    '''
    Tries to poweroff a machine on all hosts. Returns the host where the 
    poweroff succeded.
    '''
    cmd = 'xe vm-shutdown --force vm=%s' % (uuid)
    task = runner.Runner(
        module_name='shell',
        module_args=cmd,
        remote_user=remote_user
    )
    results = task.run()
    messages = results['contacted']
    for k,v in messages.iteritems():
       if len(v['stderr']) == 0:
           return k

def delete_vm(uuid):
    '''
    Tries to delete a machine on all hosts. Returns the host where the delete 
    succeeded.
    '''
    cmd = 'xe vm-uninstall --force vm=%s' % (uuid)
    task = runner.Runner(
        module_name='shell',
        module_args=cmd,
        remote_user=remote_user
    )
    results = task.run()
    messages = results['contacted']
    for k,v in messages.iteritems():
       if 'destroyed' in v['stdout'].lower():
           return k

def get_ip(host, uuid):
    '''
    Returns the IP address (string) of a machine when given a host and UUID
    '''
    cmd = 'xe vm-list uuid=\'%s\' params=networks | awk \'{print $5}\' | '\
        'sed s/\;// | head -n 1' % (uuid)
    task = runner.Runner(
        module_name='shell',
        module_args=cmd,
        run_hosts=[host],
        remote_user=remote_user
    )
    results = task.run()
    ip_dirty = results['contacted'][host]['stdout']
    ip_clean = ip_dirty.replace('\n','')
    return ip_clean

def get_uuid():
    if not args.uuid:
        print 'No UUID specified. Specify a UUID or run -h for help.'
        sys.exit(1)
    else:
        return args.uuid

def fail_uuid():
    print 'Something went wrong. Do you have the right uuid?'
    sys.exit(1)

class __main__():
    if args.action == 'mem':
        mem_util = get_memory_utilization()
        # The way this is done is admittedly silly, but it puts the results 
        # in order based on the host
        sorted_hosts = mem_util.keys()
        sorted_hosts.sort()
        print 'Host: % memory utilization'
        for key in sorted_hosts:
            print '%s: %s' % (key,mem_util[key])
    elif args.action == 'elect':
        winner = test_elect_target_host()
        print 'Winner: %s' % winner
    elif args.action == 'build':
        if not args.vmtype:
            print 'No vmtype specified. Specify a vmtype or use -h for help.'
            sys.exit(1)
        elif args.vmtype not in vmtypes:
            print 'Unrecognized vmtype: %s. Specify a valid vmtype or use '\
                '-h for help.' % (args.vmtype)
            sys.exit(1)
        else:
            if args.label and len(args.label) < 9:
                label = args.label
            if args.label and len(args.label) > 8:
                print 'Error! Label is limited to 8 characters. Please shorten '\
                    'your label and try again.'
                sys.exit(1)
            if not args.label:
                label = 'ansible'
            # getting data to build the hostname
            user = get_user()
            vmtype = args.vmtype
            user = get_user()
            ts = time.strftime('%m/%d_%H:%M')
            # this hostname will look something like this:
            # amccurdy-rm425-<LABEL>-11/20_12:34
            vmname = '%s-%s-%s-%s' % (user, vmtype, label, ts)
            host = elect_target_host()
            print 'Using %s to create %s' % (host, vmname)
            build_vm(host, vmtype, vmname)
            vm_uuid = fetch_vm_uid(host, vmname)
            if not vm_uuid:
                print 'VM not created. This shouldn\'t happen. Contact '\
                    '%s for help.' % (supbuild_owner)
                sys.exit(1)
            start_it = poweron(vm_uuid)
            if start_it: 
                print 'Successfully started %s on %s. Waiting for IP '\
                    'address' % (vmname, start_it)
            else:
                print 'VM created but didn\'t start for some reason. Try to '\
                    'power it on manually.'
            time.sleep(60)
            new_ip = get_ip(host, vm_uuid)
            if new_ip:
                print 'IP address: %s' % (new_ip)
            else: 
                print 'No IP yet. Waiting 60 more seconds.'
                time.sleep(60)
                new_ip = get_ip(host, vm_uuid)
                if new_ip: 
                    print 'IP address: %s' % (new_ip)
                else: 
                    print 'Couldn\'t get an IP. Try waiting for a minute or '\
                        'two and then checking back'
    elif args.action in ['list','list-all']:
        # fetch results for whichever list we're getting
        if args.action == 'list':
            results = list_vms()
        else: 
            results = list_vms_all()
        # format the results and print them out, again - silly way of doing it, 
        # but at least this way it sorts by host
        contacted = results['contacted']
        sorted_hosts = contacted.keys()
        sorted_hosts.sort()
        for host in sorted_hosts:
            stdout = contacted[host]['stdout']
            if len(stdout) == 0:
                stdout = ' - None'
            print 'Host: %s' % (host)
            for line in stdout.split('\n'):
                print line
            print ''
    elif args.action == 'delete':
        uuid = get_uuid()
        delete_it = delete_vm(uuid)
        if delete_it:
            print 'Deleted %s from %s' % (uuid, delete_it)
        else:
            fail_uuid()
    elif args.action == 'power-on':
        uuid = get_uuid()
        start_it = poweron(uuid)
        if start_it:
            print 'Powered on %s on %s' % (uuid, start_it)
        else:
            fail_uuid()
    elif args.action == 'power-off':
        uuid = get_uuid()
        stop_it = poweroff(uuid)
        if stop_it:
            print 'Powered off %s on %s' % (uuid, stop_it)
        else:
            fail_uuid()
    else:
        print 'Invalid argument specified: %s -- try %s -h' % \
            (args.action, sys.argv[0])
        sys.exit(1)
