#!/usr/bin/env python
import argparse
import sys
import getpass
import time
import re

from operator import itemgetter
from ansible import runner

parser = argparse.ArgumentParser()
parser.add_argument('action', help='build, list, list-all, delete, power-on, '\
    'power-off, mem, elect, util')
parser.add_argument('-v','--vmtype',type=str, help='Used in conjunction with  '\
    '"build". Pick one: rm424, rm425, cent6, cent7')
parser.add_argument('-u','--uuid',type=str, help='UUID of the VM to be  '\
    'actioned; get this from running a \'list\'')
parser.add_argument('-l','--label',type=str, help='Label for a VM name. Allows '\
    'you to slightly customize the name of your VMs. Limited to 12 characters.')
parser.add_argument('-H','--host',type=str, help='Used solely in conjunction '\
    'with \'list\' and \'list-all\'. Name of the host from which to gather the '\
    'list of virtual machines')
args = parser.parse_args()

supbuild_owner = 'Adam McCurdy, amccurdy@zenoss.com'
remote_user='root'
hosts = ['supxen1.zenoss.loc','supxen2.zenoss.loc','supxen3.zenoss.loc']
vmtypes = ['rm424', 'rm425', 'cent6', 'cent7', '508poc']
ip_timeout = 120
templatemap = {
    'supxen1.zenoss.loc': {
        'rm424': '8e1e75e0-5cb3-c2b4-ab56-f287bc44c350',
        'rm425': 'be57ff1f-1d4f-7a67-e740-160ba4e2e0de',
        'cent6': 'f719b7dd-4ce5-0ed2-b884-fcd852715c08',
        'cent7': '8fac1411-11b9-bb18-5297-fac68c29d0fe'
    },
    'supxen2.zenoss.loc': {
        'rm424': 'aa9ad0c5-e6c5-9b17-480f-990e64786507',
        'rm425': '242a4a92-15a0-6018-3b7c-e19352da361e',
        'cent6': '6173583a-3950-a00c-00b1-1dbd2dbece55',
        'cent7': '25b456c9-bd55-9268-5db9-548c6f243b7f'
    },
    'supxen3.zenoss.loc': {
        'rm424': '30c5fdf6-60b7-a3dc-d5e0-c61760b1a704',
        'rm425': '9b768e47-0b86-baaa-502f-f94f7fe65d92',
        'cent6': '8336b007-5ff2-10ce-74cd-72e1ad9db4d7',
        'cent7': '384037f4-ff88-b0c5-43e4-23464dc7cbac'
    }
}

def get_tool_name():
    '''
    Making it easier to change the name of the tool if I decide that's ever
    something smart to do.
    '''
    try:
        tool_name = sys.argv[0].split('/')[-1]
    except KeyError:
        tool_name = 'supbuild'
    return tool_name

def get_user():
    '''
    Return currently logged-in user
    '''
    return getpass.getuser()

def get_memory_utilization():
    '''
    Return dict with keys of hosts and values of memory utilization in percent
    '''
    cmd = 'xentop -b -i1 | awk \'{print $6}\''
    task = runner.Runner(
        module_name='shell',
        module_args=cmd,
        run_hosts=hosts,
        remote_user=remote_user
    )
    results = task.run()
    contacted = results['contacted']
    mem_util = {}
    for host, output in contacted.iteritems():
        stdout = output['stdout']
        util_nums = stdout.replace('MEM(%)','').split('\n')
        tot = 0
        for num in util_nums:
            if len(num) > 0:
                tot += float(num)
        mem_util[host] = tot
    return mem_util

def list_vms(host):
    '''
    Returns a run-result of VMs containing the name of the currently logged-in 
    user. Optionally uses the -H or --host filter to return results from only
    one host.
    '''
    if host == 'all':
        host = hosts
    else: 
        host = [host]
    user = get_user()
    cmd = 'xe vm-list params=name-label,uuid,power-state,networks | '\
        'grep -B1 -A2 %s' % (user)
    task = runner.Runner(
        module_name='shell',
        module_args=cmd,
        run_hosts=host,
        remote_user=remote_user
    )
    results = task.run()
    return results

def list_vms_all(host):
    '''
    Returns a run-result of all VMs on either all hosts, or a host that was
    specified via the -H or --host filter.
    '''
    if host == 'all':
        host = hosts
    else:
        host = [host]
    cmd = 'xe vm-list params=name-label,uuid,power-state,networks,VCPUs-number,memory-actual | '\
        'grep -B1 -A4 "name-label"'
    task = runner.Runner(
        module_name='shell',
        module_args=cmd,
        run_hosts=host,
        remote_user=remote_user
    )
    results = task.run()
    return results

def get_util():
    results = list_vms_all('all')
    contacted = results['contacted']
    sorted_hosts = contacted.keys()
    sorted_hosts.sort()
    user_utilization = {}
    for host in sorted_hosts:
        stdout = contacted[host]['stdout']
        if len(stdout) == 0:
            pass
        per_vm = stdout.split('uuid')
        for item in per_vm:
           vm_name = None
           memory_actual = None
           power_state = None
           vm_owner = None
           if len(item) > 3:
               per_line = item.split('\n')
               for line in per_line:
                   line = line.replace(' ','')
                   if 'name-label' in line:
                       vm_name = line.split(':')[1]
                   if 'memory-actual' in line:
                       memory_actual = int(line.split(':')[1])
                   if 'power-state' in line:
                       power_state = line.split(':')[1]
                   if vm_name:
                       if '.zenoss.loc' not in vm_name and '-' in vm_name:
                           vm_owner = vm_name.split('-')[0]
           if vm_owner and memory_actual and power_state == 'running':
               if vm_owner not in user_utilization.keys():
                   user_utilization[vm_owner] = memory_actual
               else:
                   user_utilization[vm_owner] += memory_actual
    return user_utilization
 
def elect_target_host():
    '''
    Returns the name of the VM host with the most free memory
    '''
    util = get_memory_utilization()
    election = sorted(util.items(), key=itemgetter(1))
    winner = election[0][0]
    return winner

def build_vm(host, vmtype, vmname):
    '''
    Returns a run-result of VM creation
    '''
    try: 
        source_uuid = templatemap[host][vmtype]
    except KeyError as e:
        print 'Unsupported host or vmtype: %s, %s' % (host, vmtype)
        raise(e)
    cmd = 'xe vm-copy vm=%s new-name-label=%s' % (source_uuid, vmname)
    task = runner.Runner(
        module_name='shell',
        module_args=cmd,
        run_hosts=[host],
        remote_user=remote_user
    )
    results = task.run()
    return results

def fetch_vm_uid(host, vmname):
    '''
    Returns the UUID of a VM when fed a host and vmname
    '''
    cmd = 'xe vm-list name-label=\'%s\' params=uuid | '\
        'sed  \'s/uuid ( RO)    : //\'' % (vmname)
    task = runner.Runner(
        module_name='shell',
        module_args=cmd,
        run_hosts=[host],
        remote_user=remote_user
    )
    results = task.run()
    uuid_dirty = results['contacted'][host]['stdout']
    uuid_clean = uuid_dirty.replace('\n','')
    if not len(uuid_clean) > 0:
       uuid_clean = None
    return uuid_clean

def poweron(uuid):
    '''
    Tries to poweron a machine on all hosts. Returns the host where the poweron 
    succeeded. 
    '''
    cmd = 'xe vm-start vm=%s' % (uuid)
    task = runner.Runner(
        module_name='shell',
        module_args=cmd,
        remote_user=remote_user
    )
    results = task.run()
    messages = results['contacted']
    for k,v in messages.iteritems():
       if len(v['stderr']) == 0:
           return k

def poweroff(uuid):
    '''
    Tries to poweroff a machine on all hosts. Returns the host where the 
    poweroff succeded.
    '''
    cmd = 'xe vm-shutdown --force vm=%s' % (uuid)
    task = runner.Runner(
        module_name='shell',
        module_args=cmd,
        remote_user=remote_user
    )
    results = task.run()
    messages = results['contacted']
    for k,v in messages.iteritems():
       if len(v['stderr']) == 0:
           return k

def delete_vm(uuid):
    '''
    Tries to delete a machine on all hosts. Returns the host where the delete 
    succeeded.
    '''
    cmd = 'xe vm-uninstall --force vm=%s' % (uuid)
    task = runner.Runner(
        module_name='shell',
        module_args=cmd,
        remote_user=remote_user
    )
    results = task.run()
    messages = results['contacted']
    for k,v in messages.iteritems():
       if 'destroyed' in v['stdout'].lower():
           return k

def get_ip(host, uuid):
    '''
    Returns the IP address (string) of a machine when given a host and UUID
    '''
    cmd = 'xe vm-list uuid=\'%s\' params=networks | awk \'{print $5}\' | '\
        'sed s/\;// | head -n 1' % (uuid)
    task = runner.Runner(
        module_name='shell',
        module_args=cmd,
        run_hosts=[host],
        remote_user=remote_user
    )
    results = task.run()
    ip_dirty = results['contacted'][host]['stdout']
    ip_clean = ip_dirty.replace('\n','')
    return ip_clean

def get_uuid():
    if not args.uuid:
        print 'No UUID specified. Specify a UUID or run -h for help.'
        sys.exit(1)
    else:
        return args.uuid

def fail_start():
    print 'VM failed to start. Try running \"%s mem\" to check overall '\
        'host memory utilization.' % (get_tool_name())
    sys.exit(1)

def fail_uuid():
    print 'Something went wrong. Do you have the right uuid?'
    sys.exit(1)

def fail_label():
    print 'Error! Label must be between 1 and 12 characters long and '\
        'contain only alphanumeric characters.'
    sys.exit(1)

def fail_host():
    print 'Error! Invalid host specified. Please use one of the '\
        'following hosts: %s' % (str(hosts).replace('[','').replace(']',''))
    sys.exit(1)

def fail_ip():
    print '\nError! Couldn\'t get an IP address after %s seconds. '\
        'Try waiting for a minute or two and running a \"%s list\"'\
        % (ip_timeout, get_tool_name())
    sys.exit(1)

class __main__():
    if args.action == 'mem':
        mem_util = get_memory_utilization()
        # The way this is done is admittedly silly, but it puts the results 
        # in order based on the host
        sorted_hosts = mem_util.keys()
        sorted_hosts.sort()
        print 'Host: % memory utilization'
        for key in sorted_hosts:
            print '%s: %s' % (key,mem_util[key])
    elif args.action == 'elect':
        winner = elect_target_host()
        print 'Winner: %s' % winner
    elif args.action == 'build':
        if not args.vmtype:
            print 'No vmtype specified. Specify a vmtype or use -h for help.'
            sys.exit(1)
        elif args.vmtype not in vmtypes:
            print 'Unrecognized vmtype: %s. Specify a valid vmtype or use '\
                '-h for help.' % (args.vmtype)
            sys.exit(1)
        else:
            if args.label:
                if len(args.label) > 12:
                    fail_label()
                else: 
                    label = args.label
            else:
                label = get_tool_name()
            if not re.match('^[A-Za-z0-9]*$', label):
                fail_label()
            # getting data to build the hostname
            user = get_user()
            vmtype = args.vmtype
            user = get_user()
            ts = time.strftime('%m/%d_%H:%M')
            # this hostname will look something like this:
            # amccurdy-rm425-<LABEL>-11/20_12:34
            vmname = '%s-%s-%s-%s' % (user, vmtype, label, ts)
            host = elect_target_host()
            print 'Using %s to create %s' % (host, vmname)
            build_vm(host, vmtype, vmname)
            vm_uuid = fetch_vm_uid(host, vmname)
            if not vm_uuid:
                print 'VM not created. This shouldn\'t happen. Contact '\
                    '%s for help.' % (supbuild_owner)
                sys.exit(1)
            start_it = poweron(vm_uuid)
            if start_it: 
                print 'Successfully started %s on %s' % (vmname, start_it)
            else:
               fail_start()
            # Here we're using sys.stdout to essentially print on the same
            # line. We try to get an IP, if we don't get one, we sleep for
            # 5 seconds and try again. The reason that it checks for the 10
            # at the start of the ipaddr string is that sometimes the get
            # ip method will return the string "in" when the target VM
            # doesn't have a valid IP address.
            sys.stdout.write('Waiting on IP address')
            ip_timer = 0
            new_ip = False
            while not new_ip:
                sys.stdout.write('.')
                sys.stdout.flush()
                ipaddr = get_ip(host, vm_uuid)
                new_ip = ipaddr if ipaddr.startswith('10') else False
                if not new_ip:
                    time.sleep(5)
                ip_timer += 5
                if ip_timer >= ip_timeout:
                    break
            if new_ip:
                print '\nIP address: %s' % (new_ip)
            else: 
                fail_ip()
    # checking for list actions, looking for host filter, and grabbing/parsing
    # lists of VMs
    elif args.action in ['list','list-all']:
        if args.host and args.host in hosts:
            host = args.host
        elif args.host and args.host not in hosts:
            fail_host()
        elif not args.host:
            host = 'all'
        if args.action == 'list':
            results = list_vms(host)
        elif args.action == 'list-all':
            results = list_vms_all(host)
        # format the results and print them out, again - silly way of doing it, 
        # but at least this way it sorts by host
        contacted = results['contacted']
        sorted_hosts = contacted.keys()
        sorted_hosts.sort()
        for host in sorted_hosts:
            stdout = contacted[host]['stdout']
            if len(stdout) == 0:
                stdout = ' - None'
            print 'Host: %s' % (host)
            for line in stdout.split('\n'):
                if line.startswith('--'):
                    print ''
                else: 
                    print line
            print ''
    elif args.action == 'util':
        user_utilization = get_util()
        users = user_utilization.keys()
        users.sort()
        print 'User           :  Memory Utilization (GB)'
        for user in users:
            utilization = user_utilization[user]/1024/1024/1024
            print '%-15s:  %-15s' % (user, utilization)
    elif args.action == 'delete':
        uuid = get_uuid()
        delete_it = delete_vm(uuid)
        if delete_it:
            print 'Deleted %s from %s' % (uuid, delete_it)
        else:
            fail_uuid()
    elif args.action == 'power-on':
        uuid = get_uuid()
        start_it = poweron(uuid)
        if start_it:
            print 'Powered on %s on %s' % (uuid, start_it)
        else:
            fail_uuid()
    elif args.action == 'power-off':
        uuid = get_uuid()
        stop_it = poweroff(uuid)
        if stop_it:
            print 'Powered off %s on %s' % (uuid, stop_it)
        else:
            fail_uuid()
    else:
        print 'Invalid argument specified: %s -- try running "%s -h"' % \
            (args.action, get_tool_name())
        sys.exit(1)
