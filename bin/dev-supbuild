#!/usr/bin/env python
import argparse
import sys
import getpass
from operator import itemgetter

from ansible import runner

parser = argparse.ArgumentParser()
parser.add_argument('action', help='build, list, list-all, delete, power-on, power-off')
parser.add_argument('-v','--vmtype',type=str, help='rm424, rm425, cent6, cent7')
parser.add_argument('-u','--uuid',type=str, help='uuid of the VM to be actioned; get this from running a \'list\'')
args = parser.parse_args()

#hosts = ['supxen1.zenoss.loc','supxen2.zenoss.loc','supxen3.zenoss.loc']
vmtypes = ['rm424', 'rm425', 'cent6', 'cent7']

def get_user():
    return getpass.getuser()

def get_memory_utilization():
    cmd = 'xentop -b -i1 | awk \'{print $6}\''
    task = runner.Runner(
        module_name='shell',
        module_args=cmd
    )
    results = task.run()
    contacted = results['contacted']
    mem_util = {}
    for host, output in contacted.iteritems():
        stdout = output['stdout']
        util_nums = stdout.replace('MEM(%)','').split('\n')
        tot = 0
        for num in util_nums:
            if len(num) > 0:
                tot += float(num)
        mem_util[host] = tot
    return mem_util

def list_vms():
    user = get_user()
    cmd = 'xe vm-list params=name-label,uuid,power-state,networks | grep -B1 -A2 %s' % (user)
    task = runner.Runner(
        module_name='shell',
        module_args=cmd
    )
    results = task.run()
    return results

def list_vms_all():
    user = get_user()
    cmd = 'xe vm-list params=name-label,uuid,power-state,networks | grep -B1 -A2 "name-label"'
    task = runner.Runner(
        module_name='shell',
        module_args=cmd
    )
    results = task.run()
    return results

def elect_target_host():
    util = get_memory_utilization()
    # temporarily removing supxen1 from the mix
    if 'supxen1.zenoss.loc' in util.keys():
        del(util['supxen1.zenoss.loc'])
    election = sorted(util.items(), key=itemgetter(1))
    winner = election[0][0]
    return winner

class __main__():
    if args.action == 'mem':
        mem_util = get_memory_utilization()
        sorted_hosts = mem_util.keys()
        sorted_hosts.sort()
        print 'Host: % memory utilization'
        for key in sorted_hosts:
            print '%s: %s' % (key,mem_util[key])
    elif args.action == 'build':
        if not args.vmtype:
            print 'No vmtype specified. Specify a vmtype or use -h for help.'
            sys.exit(1)
        elif args.vmtype not in vmtypes:
            print 'Unrecognized vmtype: %s. Specify a valid vmtype or use -h for help.' % (args.vmtype)
            sys.exit(1)
        else:
            vmtype = args.vmtype
            print 'yeah I\'ll totally build you a %s VM' % (vmtype)
    elif args.action in ['list','list-all']:
        if args.action == 'list':
            results = list_vms()
        else: 
            results = list_vms_all()
        contacted = results['contacted']
        sorted_hosts = contacted.keys()
        sorted_hosts.sort()
        for host in sorted_hosts:
            stdout = contacted[host]['stdout']
            if len(stdout) == 0:
                stdout = ' - None\n'
            print '\nHost: %s' % (host)
            for line in stdout.split('\n'):
                print line
    elif args.action == 'delete':
        print 'delete stuff'
    elif args.action == 'power-on':
        print 'power-on stuff'
    elif args.action == 'power-off':
        print 'power-off stuff'

print elect_target_host()
